;
; global custom
;
[custom]
build_flags =
  -D MASK_VERSION=0x091A
  -D KNX_TUNNELING=16
  -D SERIAL_DEBUG=Serial
  -D KNX_ACTIVITYCALLBACK
  -D OPENKNX_NETWORK_USEIPPROP
  -D KNX_SERVICE_FAMILY=0x02
  -D USE_KNX_DMA_UART=0
  -D USE_KNX_DMA_IRQ=0
  -D MAX_RX_QUEUE_BYTES=2048
  -D MAX_TX_QUEUE=100
  -I lib/OGM-HardwareConfig/include/
  ;-D OPENKNX_LEDEFFECT_ACTIVITY_DURATION=100


; Board definition for Waveshare ESP32-S3 Pico
[custom_board_ws_esp32s3_pico]
platform = espressif32
framework = arduino
board_build.memory_type = qio_opi
board_build.f_cpu = 240000000L
board_build.f_flash = 80000000L
board_build.flash_mode = dio ;qio
board_build.flash_freq = 80m
board_build.flash_size = 16MB
board_build.hwids = [["0x303A", "0x1001"]]
board_build.mcu = esp32s3
board_build.variant = ESP32S3
board_build.extra_flags =
    -D ARDUINO_WAVESHARE_ESP32S3
    -D BOARD_HAS_PSRAM
    -D ARDUINO_USB_CDC_ON_BOOT=0 ; 0 (disabled) so the OPenKNX console is disturbed by the USB-CDC
                                 ; 0 (disabled) → USB-CDC is not activated as a serial port during boot
                                 ; 1 (enabled) → ESP32-S3 pico's virtual COM port (no external USB-UART adapter needed)
    -D ARDUINO_RUNNING_CORE=1
    -D ARDUINO_EVENT_RUNNING_CORE=1
    -D ARDUINO_USB_MODE=1
;   -U BOARD_HAS_PSRAM                    ; Disable PSRAM
;   -D CONFIG_SPIRAM_SUPPORT=0            ; Disable SPIRAM
;   -D CONFIG_SPI_MASTER_IN_IRAM=0        ; Disable SPI Master in IRAM
;   -D CONFIG_SPI_SLAVE_IN_IRAM=0         ; Disable SPI Slave in IRAM
;   -D CONFIG_SPI_FLASH_SHARE_SPI1_BUS=0  ; Disable SPI Flash share SPI1 bus
;   -D CONFIG_SPI_MASTER_IN_IRAM=0        ; Disable SPI Master in IRAM
;   -D CONFIG_SPI_SLAVE_IN_IRAM=0         ; Disable SPI Slave in IRAM
;   -D CONFIG_SPI_FLASH_SHARE_SPI1_BUS=0  ; Disable SPI Flash share SPI1 bus
;   -D CONFIG_ESP_CONSOLE_USB_SERIAL=0    ; Disable USB Serial Console
;   -D CONFIG_ESP_CONSOLE_UART_NONE=1     ; Disable UART Console
;   -D CONFIG_JTAG_ENABLE_ESP32S3=0       ; Disable JTAG
;   -D CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240=1 ; Set CPU frequency to 240MHz
;   -D CONFIG_ESP32S3_DEFAULT_CPU_FREQ_160=0 ; Set CPU frequency to 160MHz
;   -D CONFIG_ESP32S3_DEFAULT_CPU_FREQ_80=0  ; Set CPU frequency to 80MHz
;   -D CONFIG_ESP32S3_DEFAULT_CPU_FREQ_40=0  ; Set CPU frequency to 40MHz
;debug_port = /dev/cu.usbmodem84201
;upload_port = /dev/cu.usbmodem84201
;monitor_port = /dev/cu.usbmodem57640270261
;debug_tool = esp32s3-builtin
upload_speed = 921600
monitor_speed = 115200

[custom_develop]
extends = custom
build_flags =
  ${custom.build_flags}
  -D OPENKNX_HEARTBEAT
  ; -D OPENKNX_HEARTBEAT_PRIO
  ; -D OPENKNX_RTT
  ; -D BUFFER_SIZE_UP=10240
  ; -D DEBUG_LOOP_TIME=10 ; will print a info when a loop took more than x ms.
  ; -D LOGIC_TRACE
  ; ; to see trace logs, they must match one of the 5 filters (TRACE_LOG1 .. TRACE_LOG2)
  ; "-D OPENKNX_TRACE1=Common.*"
  ; "-D OPENKNX_TRACE3=DummyChannel<1>"
  ; "-D OPENKNX_TRACE4=DummyChannel<[3-5]>"
  ;-D KNX_LOG_COUPLER
  ;-D DEBUG_TP_FRAMES
  ;-D KNX_LOG_TUNNELING
  ;-D OPENKNX_RUNTIME_STAT
  ;-D OPENKNX_RUNTIME_STAT_BUCKETN=10
  ;-D OPENKNX_LOOPTIME_WARNING=15
  ;"-D OPENKNX_RUNTIME_STAT_BUCKETS=5000, 10000, 15000, 20000, 30000, 40000, 50000, 100000, 200000"


[custom_develop_RP2040]
extends = RP2040_develop, custom_develop
build_flags =
  ${RP2040_develop.build_flags}
  ${custom_develop.build_flags}

[custom_release_RP2040]
extends = RP2040_releases, custom
build_flags =
  ${RP2040_releases.build_flags}
  ${custom.build_flags}
  -D OPENKNX_LOOPTIME_WARNING=50


[custom_develop_ESP32]
extends = ESP32_develop, custom_develop
build_flags =
  ${ESP32_develop.build_flags}
  ${custom_develop.build_flags}
  -D OPENKNX_USB_EXCHANGE_IGNORE
  ;-D CONFIG_HEAP_CORRUPTION_DETECTION=CONFIG_HEAP_POISONING_COMPREHENSIVE

[custom_release_ESP32]
extends = ESP32_releases, custom
build_flags =
  ${ESP32_releases.build_flags}
  ${custom.build_flags}
  -D OPENKNX_USB_EXCHANGE_IGNORE
  -D OPENKNX_LOOPTIME_WARNING=50



; ------ PiPico ------
[env:develop_PIPICO]
extends = custom_develop_RP2040, RP2040_2MB, RP2040_EXCHANGE_2MB, RP2040_UPLOAD_USB
build_flags =
   ${custom_develop_RP2040.build_flags}
   ${RP2040_EXCHANGE_2MB.build_flags}
  -D BOARD_PIPICO
;  -D KNX_IP_W5500 ; Currently not supported

[env:develop_PIPICO_JLINK]
extends = env:develop_PIPICO, UPLOAD_JLINK

; ------ W5500-EVB-Pico ------
[env:develop_W5500_EVB_PICO]
extends = custom_develop_RP2040, RP2040_2MB, RP2040_EXCHANGE_2MB, RP2040_UPLOAD_USB
build_flags =
   ${custom_develop_RP2040.build_flags}
   ${RP2040_EXCHANGE_2MB.build_flags}
  -D BOARD_W5500_EVB_PICO
  -D KNX_IP_LAN

[env:develop_W5500_EVB_PICO_JLINK]
extends = env:develop_W5500_EVB_PICO, UPLOAD_JLINK

; ------ PiPicoW ------
[env:develop_PIPICOW]
extends = custom_develop_RP2040, RP2040_2MB, RP2040_EXCHANGE_2MB, RP2040_UPLOAD_USB
board = rpipicow
build_flags =
   ${custom_develop_RP2040.build_flags}
   ${RP2040_EXCHANGE_2MB.build_flags}
  -D BOARD_PIPICOW
  -D KNX_IP_WIFI

[env:develop_PIPICOW_JLINK]
extends = , env:develop_PIPICOW, UPLOAD_JLINK


; ------ REG1-Eth ------
[env:develop_REG1_ETH]
extends = custom_develop_RP2040, RP2040_16MB, RP2040_EXCHANGE_16MB, RP2040_UPLOAD_USB
build_flags =
   ${custom_develop_RP2040.build_flags}
   ${RP2040_EXCHANGE_16MB.build_flags}
  -D DEVICE_REG1_ETH
  -D KNX_IP_LAN

[env:develop_REG1_ETH_JLINK]
extends = env:develop_REG1_ETH, UPLOAD_JLINK

; ------ REG1-LAN-TP-Base ------
[env:develop_REG1_LAN_TP_BASE]
extends = custom_develop_ESP32, ESP32_8MB
build_flags =
   ${custom_develop_ESP32.build_flags}
  ;-D DEVICE_DEV_REG1_LAN_TP_Base_V00_02
  -D DEVICE_REG1_LAN_TP_BASE
  -D KNX_IP_LAN
  -D CONFIG_ETH_ENABLED

[env:develop_REG1_LAN_TP_BASE_JTAG]
extends = custom_develop_ESP32, ESP32_8MB, UPLOAD_ESP_PROG
build_flags =
   ${custom_develop_ESP32.build_flags}
  -D DEVICE_REG1_LAN_TP_BASE
  -D KNX_IP_LAN
  -D CONFIG_ETH_ENABLED

; ------ REG2-PICO-Eth ------
[env:develop_REG2_PICO_ETH]
extends = custom_develop_RP2040, RP2040_2MB, RP2040_EXCHANGE_2MB
build_flags =
   ${custom_develop_RP2040.build_flags}
   ${RP2040_EXCHANGE_2MB.build_flags}
  -D DEVICE_REG2_PIPICO_V1_ETH
  ;-D DEVICE_DISPLAY_MODULE_SSD1315
  -D KNX_IP_LAN

; ------ REG2-PICO-WIFI ------
[env:develop_REG2_PICO_WIFI]
extends = custom_develop_RP2040, RP2040_2MB, RP2040_EXCHANGE_2MB
board = rpipicow
build_flags =
   ${custom_develop_RP2040.build_flags}
   ${RP2040_EXCHANGE_2MB.build_flags}
  -D DEVICE_REG2_PIPICO_W_V1
  ;-D DEVICE_DISPLAY_MODULE_SSD1315
  -D KNX_IP_WIFI

; ------ REG2-ESP32-PICO-Eth ------
[env:develop_REG2_PICO_ESP_ETH_DD]
extends = custom_board_ws_esp32s2_pico, custom_release_ESP32, ESP32_16MB
build_flags =
   ${custom_develop_ESP32.build_flags}
  -D OKNXHW_REG2_ESP_S3_PICO_V1_DD
  -D KNX_IP_LAN
  -D CONFIG_ETH_ENABLED
  ;-UDEVICE_DISPLAY_MODULE         ; Default Display Module SSD1306
  -D DEVICE_DISPLAY_MODULE_SSD1315 ; Display Module is SSD1315
  ;-D OPENKNX_DEBUG
  ;-D OPENKNX_TRACE1=Common.*       ; Enable Trace for Common
  ;-D OPENKNX_TRACE3=Hardware.*     ; Enable Trace for Hardware
  ;upload_protocol = espota
  ;upload_port = 11.11.0.43 ; IP Address or Hostname

; -------------------------
; RELEASES
; -------------------------

; ----- Rleases REG1 ------
[env:release_REG1_ETH]
extends = custom_release_RP2040, RP2040_16MB, RP2040_EXCHANGE_16MB
build_flags =
   ${custom_release_RP2040.build_flags}
   ${RP2040_EXCHANGE_16MB.build_flags}
  -D DEVICE_REG1_ETH
  -D KNX_IP_LAN

[env:release_REG1_LAN_TP_BASE]
extends = custom_release_ESP32, ESP32_8MB
build_flags =
   ${custom_release_ESP32.build_flags}
   ${custom_develop_ESP32.build_flags}
  -D DEVICE_REG1_LAN_TP_BASE
  -D KNX_IP_LAN
  -D CONFIG_ETH_ENABLED0

; ----- Releases REG2 ------
; REG2 Pi PICO Ethernet
[env:release_REG2_PICO_ETH]
extends = custom_release_RP2040, RP2040_2MB, RP2040_EXCHANGE_2MB
build_flags =
  ${custom_release_RP2040.build_flags}
  ${RP2040_EXCHANGE_2MB.build_flags}
  -D DEVICE_REG2_PIPICO_V1_ETH
  -D OPENKNX_SD_CARD_MODULE_ENABLE
  -D KNX_IP_LAN

; REG2 Pi PICO Ethernet with Display and Control Buttons
[env:release_REG2_PICO_ETH_DD]
extends = custom_release_RP2040, RP2040_2MB, RP2040_EXCHANGE_2MB
build_flags =
  ${custom_release_RP2040.build_flags}
  ${RP2040_EXCHANGE_2MB.build_flags}
  -D DEVICE_REG2_PIPICO_V1_ETH_DD
  -D OPENKNX_SD_CARD_MODULE_ENABLE
  -D DEVICE_DISPLAY_MODULE
  -D USE_GPIO_MODULE
  ;-D DEVICE_DISPLAY_MODULE_SSD1315 ; Display Module is SSD1315 - Replace with SSD1306 support if needed
  -D KNX_IP_LAN

; REG2 Pi PICO W Ethernet (LAN only)
[env:release_REG2_PICO_W_ETH] 
extends = custom_release_RP2040, RP2040_2MB, RP2040_EXCHANGE_2MB
build_flags =
  ${custom_release_RP2040.build_flags}
  ${RP2040_EXCHANGE_2MB.build_flags}
  -D DEVICE_REG2_PIPICO_W_V1_ETH
  -D OPENKNX_SD_CARD_MODULE_ENABLE
  -D KNX_IP_LAN ; Only in Combination with REG2 W5500 Lite App
  ;-D KNX_IP_WIFI ; Currently not supported on rp2040.
  

; REG2 Pi PICO W Ethernet (LAN only) with Display and Control Buttons
[env:release_REG2_PICO_W_ETH_DD] 
extends = custom_release_RP2040, RP2040_2MB, RP2040_EXCHANGE_2MB
build_flags =
  ${custom_release_RP2040.build_flags}
  ${RP2040_EXCHANGE_2MB.build_flags}
  -D DEVICE_REG2_PIPICO_W_V1_ETH_DD
  -D OPENKNX_SD_CARD_MODULE_ENABLE
  -D DEVICE_DISPLAY_MODULE
  -D USE_GPIO_MODULE
 ;-D DEVICE_DISPLAY_MODULE_SSD1315 ; Display Module is SSD1315 - Replace with SSD1306 support if needed
  ;-D KNX_IP_WIFI ; Currently not supported on rp2040.
  -D KNX_IP_LAN ; Only in Combination with REG2 W5500 Lite App

; REG2 Pi PICO 2 Ethernet with Display and Control Buttons
[env:release_REG2_PICO2_ETH]
extends = custom_release_RP2040, RP2040_4MB, RP2040_EXCHANGE_4MB
board = rpipico2
build_flags =
  ${custom_release_RP2040.build_flags}
  ${RP2040_EXCHANGE_4MB.build_flags}
  -D DEVICE_REG2_PIPICO_V1_ETH
  -D OPENKNX_SD_CARD_MODULE_ENABLE
  -D KNX_IP_LAN
  -UUSE_KNX_DMA_UART ; Disable USE_KNX_DMA_UART - Currentyl not supporting the Pico2! 
  -UUSE_KNX_DMA_IRQ ; Disable USE_KNX_DMA_IRQ - Currentyl not supporting the Pico2!

; REG2 Pi PICO 2 Ethernet with Display and Control Buttons
[env:release_REG2_PICO2_ETH_DD]
extends = custom_release_RP2040, RP2040_4MB, RP2040_EXCHANGE_4MB
board = rpipico2
build_flags =
  ${custom_release_RP2040.build_flags}
  ${RP2040_EXCHANGE_4MB.build_flags}
  -D DEVICE_REG2_PIPICO2_V1_ETH_DD
  -D OPENKNX_SD_CARD_MODULE_ENABLE
  -D DEVICE_DISPLAY_MODULE
  -D USE_GPIO_MODULE
  ;-D DEVICE_DISPLAY_MODULE_SSD1315 ; Display Module is SSD1315 - Replace with SSD1306 support if needed
  -D KNX_IP_LAN
  -UUSE_KNX_DMA_UART ; Disable USE_KNX_DMA_UART - Currentyl not supporting the Pico2!
  -UUSE_KNX_DMA_IRQ ; Disable USE_KNX_DMA_IRQ - Currentyl not supporting the Pico2!

; REG2 ESP32 PICO Ethernet
[env:release_REG2_PICO_ESP_ETH]
extends = custom_board_ws_esp32s3_pico, custom_release_ESP32, ESP32_16MB
build_flags =
   ${custom_release_ESP32.build_flags}
   ${custom_develop_ESP32.build_flags}
  -D OKNXHW_REG2_ESP_S3_PICO_V1
  -D OPENKNX_SD_CARD_MODULE_ENABLE
  -D KNX_IP_LAN
  -D CONFIG_ETH_ENABLED

; REG2 ESP32 PICO Ethernet with Display and Control Buttons
[env:release_REG2_PICO_ESP_ETH_DD]
extends = custom_board_ws_esp32s3_pico, custom_release_ESP32, ESP32_16MB
build_flags =
   ${custom_release_ESP32.build_flags}
   ${custom_develop_ESP32.build_flags}
  -D OKNXHW_REG2_ESP_S3_PICO_V1_DD
  -D OPENKNX_SD_CARD_MODULE_ENABLE
  -D DEVICE_DISPLAY_MODULE
  -D USE_GPIO_MODULE
  -D DEVICE_DISPLAY_MODULE_SSD1315 ; Display Module is SSD1315 - Replace with SSD1306 support if needed
  -D KNX_IP_LAN 
  -D CONFIG_ETH_ENABLED
  -D CONFIG_IDF_TARGET_ESP32S3